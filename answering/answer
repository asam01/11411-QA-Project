#!/usr/bin/env python3

# uncomment to suppress warnings about version
import warnings
warnings.filterwarnings("ignore")

import tensorflow as tf
tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

import spacy
import nltk
from nltk.corpus import wordnet as wn
import benepar
from benepar.spacy_plugin import BeneparComponent
import reverseAsk
import answerBinary
import find_sentence
import sys 
import io 
import itertools

nlp = spacy.load("en_core_web_sm")
nlp.add_pipe(BeneparComponent('benepar_en2'))
nltk.download('averaged_perceptron_tagger', quiet=True)

question_words = ["who", "where", "which", "when", "what", 'how many', 'why']

def findInterrogative(question):
    question = question.lower()
    words = question.split()
    for qWord in question_words:
        if qWord in question:
            return qWord

# add case for how many questions 
def answerMain(question, corpus):
    qnWord = findInterrogative(question)

    # tokenize by sentence
    nlp = spacy.load('en_core_web_sm', disable = ['ner', 'parser', 'tagger'])
    nlp.add_pipe(nlp.create_pipe('sentencizer'))
    doc = nlp(corpus)
    sentences = [sent.string.strip() for sent in doc.sents] 
    sentenceWithAnswer = find_sentence.find_sentence(question, sentences)
    if qnWord:
        answer = reverseAsk.answerWh(question, sentenceWithAnswer)
    else: 
        answer = [answerBinary.answerBinary(question, sentenceWithAnswer)]
    return answer

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: python3 answer.py article.txt questions.txt")
        sys.exit(1)

    article = sys.argv[1]
    questions = (sys.argv[2])
    
    article_string = ""
    questions_string = "" 
    with io.open(article, 'r', encoding='utf8') as f:
        article_string = f.read()
    with io.open(questions, 'r', encoding='utf8') as f: 
        questions_string = f.read() 
    qs = questions_string.split("\n")

    answers = [] 
    for q in qs:
        answers.append(answerMain(q, article_string)) 

    # output to stdout
    for a in answers:
        if not a:
            print('Idk')
        else:
            print(a[0])




